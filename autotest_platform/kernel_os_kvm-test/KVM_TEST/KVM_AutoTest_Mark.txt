前言：本文档是介绍kvm自动化测试平台的设计思路和总结过程
      目的是便于理解整个项目架构，防止遗忘

项目介绍

项目名称：kvm自动化测试平台
项目功能:
在KVM相关的软件包更新后，实现虚拟机自动测试功能
本项目代码库的主要内容就是为实现这个自动化测试平台编写的各种功能和测试脚本

详细介绍:

本目录下包含了kvm测试自动化平台的代码，
现有版本是第一版

=====================================================================================================================
实现的功能包括：

1.kvm环境搭建
  安装kvm环境所需要的各种包
  前提是安装测试源：
  yum  install loongnix-test-release  -y && yum makecache

  脚本：
  kvm-install.sh   //安装测试源，安装kvm环境所需要的包
  
  kvm-testPre.sh   //kvm-install.sh中的操作可以移植到这个脚本，先执行，做了异常处理，待完善


  注意：
        [1]在对宿主机进行安装环境之前，需要将宿主机器配置好
          例如，需要在宿主机安装expect
          对于sshd服务，实现开启，并设置为开机自动启动，
          防火墙设置为开启的，因为防火墙关闭会造成kvm不能上外网
          命令如下：
          yum install expect -y
          systemctl start sshd
          systemctl enable sshd
          systemctl start firewalld
          systemctl enable firewalld

        [2]输入qcow2镜像文件
          需要在/home下，放置qcow2镜像，并且qcow2要做到sshd随开机启动，这样才能保证虚拟机能够被宿主机远程连接成功

2.验证操作系统平台环境和设置开机启动菜单配置文件
  首先判断OS的主板类型：PMON，UEFI，kunlun
  根据不同的主板类型，选择不同的开机启动菜单配置文件
  开机启动菜单配置文件分两种情况：
  PMON：boot.cfg
  非PMON(UEFI或kunlun):grub.cfg
  文件绝对路径 (/boot/boot.cfg)
               (/boot/grub.cfg)


  通过设置好的标准参照文件，根据不同主板型号，以及内核版本号的区分
  添加开机启动菜单项，并且修改内核版本为最新的

  注意：现有程序只支持一个内核的情况
  默认，如果内核更新版本，在修改启动菜单时，要将版本号修改为最新的
  若从来没有安装过kvm环境，需要添加开机启动菜单项
  如果曾经安装过kvm环境，开机菜单项已经添加了kvm的启动项，
  那么需要重新安装更新的软件包之外，
  还需要替换掉开机启动菜单项中的内核版本号(其实修改的就是整个内核文件的名字)

  脚本：
  set_bootFile.sh
   

----------------------------------------------------------------------------------  

3.环境搭建后，宿主机reboot
  命令：
  shutdown -r (默认等待1分钟，最小单位是分钟，不是秒)

4.验证宿主机开机是否成功

  另外找一台机器:利用ping方式等待指定时间内是否能够ping通
  脚本：
  checkConnRemote.sh  
 

5.宿主机开机之后，验证kvm环境是否正常搭建
  方法是验证libvirtd是否已经开机自动启动，如启动则证明kvm环境搭建成功
  kvm-checkInstall.sh
---------------------------------------------------------------------------------
kvm环境搭建成功后，开始测试基本功能
第一版，为实现自动化，首先支持一个kvm的情况，虚拟机名称定义为:fedora21-1

6.kvm创建
  导入方式，创建虚拟机
  
  输入：qcow2镜像
  使用virsh命令创建
  要考虑诸多的创建场景，例如是否已经创建过，是否重名，如创建过，机器的状态是否开机，
  如果关机直接删除，如果是开机，需要先进行关机，然后再删除，不然会出错
  脚本:
  kvm-create.sh

7.kvm开机
  开机命令
  异常处理
  ...
  脚本:
  kvm-start.sh

8.kvm关机
  关机命令
  异常处理
  ...
  脚本：
  kvm-shutdown.sh

9.kvm删除
  删除命令
  异常处理
  ...
  脚本：
  kvm-delete.sh
-----------------------------------------------------------------------------------  
kvm开机验证

10.kvm列表
   可以查看当前创建的kvm列表
   脚本:
   kvm-showList.sh
-----------------------------------------------------------------------------------

开始进行kvm上的测试

-----------------------------------------------------------------------------------

11.创建虚拟机
   创建命令
   异常处理
   ...
   制作jenkins流程时考虑，可以延续上面的步骤，假设这里重新创建

12.虚拟机开机
   开机命令
   异常处理
   ...

13.获取虚拟机的IP
   删除旧的arp缓存，重新获取arp缓存，
   然后根据MAC地址筛选出来ip地址
   关于IP地址的获取，暂时是通过以上方法获取的
   之后需要探索其他方法
   脚本:
   getKVMIP.sh

14.远程虚拟机执行命令
   remoteStartTest.sh   //本地宿主机执行远程kvm命令，验证kvm开机后能够执行简单的操作
   sshExecCmd.exp       //调用免密码expect脚本


15.远程虚拟机执行脚本
  remoteExSh.sh         //远程执行进程切换测试(x.sh)
  
  remoteExTest.sh       //远程执行脚本测试

  uploadFile2KVM.sh     //提前把本地文件上传到远程虚拟机上

16.远程连接kvm 
   远程连接首先获取IP，然后ssh登录到虚拟机上，为下一步在kvm上进行性能、稳定性测试做准备    
   connRemoteKVM.sh    //找到虚拟机IP后，远程连接到虚拟机
   sshConnKVM.exp      //免密码方式，拷贝ssh的key到远程虚拟机上

17.kvm性能稳定性测试
  (1)下载测试集
     kvm-downloadTestSuite.sh
  (2)性能测试
     performanceTest.sh
  (3)稳定性测试
     stabilityTest.sh


18.shell日志
   脚本：
   kvm-log.sh

19.python日志
   脚本:
   log.py

20.公共函数处理
   脚本：
   common-fun.sh 
   新版本:common-fun-tar.sh

21.异常处理
   脚本:
   exceptionTrap.sh

22.虚拟机参考文件
   templet.xml
   创建虚拟机以此为模板

23.开机启动菜单添加内容参照文件
   
   ├── pmonStd.file      //PMON主板标准文件
   ├── pmonStd.file.bak  //PMON主板标准文件备份  （因为要修改内核版本号）
   ├── pmonboot.cfg      //PMON主板测试文件
   ├── pmonboot.cfg.bak  //PMON主板测试文件备份  （因为本地测试模拟，不能真正修改配置文件）
   ├── pxeStd.file       //非PMON主板标准文件
   ├── pxeStd.file.bak   //非PMON主板标准文件备份（因为要修改内核版本号）
   ├── pxeboot.cfg       //非PMON主板测试文件
   ├── pxeboot.cfg.bak   //非PMON主板测试文件备份（因为本地测试模拟，不能真正修改配置文件）

24.远程虚拟机执行命令
   remoteStartTest.sh   //本地宿主机执行远程kvm命令，验证kvm开机后能够执行简单的操作
   sshExecCmd.exp       //调用免密码expect脚本


25.远程虚拟机执行脚本
  remoteExSh.sh         //远程执行进程切换测试(x.sh)
  
  remoteExTest.sh       //远程执行脚本测试

  uploadFile2KVM.sh     //提前把本地文件上传到远程虚拟机上

26.远程连接kvm
   远程连接首先获取IP，然后ssh登录到虚拟机上，为下一步在kvm上进行性能、稳定性测试做准备    
   connRemoteKVM.sh    //找到虚拟机IP后，远程连接到虚拟机
   sshConnKVM.exp      //免密码方式，拷贝ssh的key到远程虚拟机上

26.kvm性能稳定性测试
  (1)下载测试集
     kvm-downloadTestSuite.sh
  (2)性能测试
     performanceTest.sh
  (3)稳定性测试
     stabilityTest.sh

=====================================================================================================================
